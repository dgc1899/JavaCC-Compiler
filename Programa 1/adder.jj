/* adder.jj Para tokenizer*/

options{	
			STATIC=false;
		}
// Bloque de instrucciones para definir el Parser		
PARSER_BEGIN(adder)
import java.util.ArrayList;

class adder{
			public static void main(String[]args)
			throws ParseException, TokenMgrError{
			adder parser=new adder(System.in);
			parser.Programa();}
		}			
PARSER_END(adder)

//Inicio de estados léxicos

//Token para Alcance de Identificador
TOKEN:{
<IDREACH:"public "|"private "|"protected " > {System.out.println("IDREACH->"+image+"\r\n");}	
}
//Tokens para declarar metodos y clases
TOKEN:{
	<CLASSTYPE:"abstract | static | const | implements | clascy ">{System.out.println("CLASSTYPE-> "+image+"\r\n");}
}

//Token para tipo de retorno
TOKEN:{
	<VOID:"void ">{System.out.println("VOID-> "+"\r\n");}
}

//Tokens de tipos de numeros
TOKEN:{
		<NUMTYPES:("int "|"byte"|"short"|"long"|"sbyte"|"ushort"|"ulong")>{System.out.println("NUMTYPES-> "+image+"\r\n");}
		|<FLOATTYPE:("float "|"double "|"decimal ")>{System.out.println("FLOATTYPE-> "+image+"\r\n");}
	}

//Tokens de tipo de datos alfanumericos
TOKEN:{
	<STRINGTYPE:("string ")>{System.out.println("STRINGTYPE-> "+"\r\n");}
	|<CHARTYPE:("char ")>{System.out.println("CHARTYPE-> "+"\r\n");}
}
	
//Token para tipo de dato booleano
TOKEN:{  
   <BOOL:"bool" >{System.out.println("BOOL->"+"\r\n");}
}


//Tokens de símbolos
TOKEN:
{
	<LPAR:"( ">{System.out.println("LPAR->"+"\r\n");}
	| <RPAR:") ">{System.out.println("RPAR->"+"\r\n");}
	| <LBRACE:"{ ">{System.out.println("LBRACE->"+"\r\n");}
	| <RBRACE:"} ">{System.out.println("RBRACE->"+"\r\n");}
	| <SEMICOLON:"; ">{System.out.println("SEMICOL->"+"\r\n");}
	| <COLON:":">{System.out.println("COL->"+"\r\n");}
	| <COMA:", "> {System.out.println("COMA->"+"\r\n");}
	| <DOUBLEC:"\""> {System.out.println("DOUBLEC->"+"\r\n");}
}

//Tokens para bloques repetitivos, control de flujo
TOKEN:{
	<LOOPFOR:"for ">{System.out.println("LOOPFOR-> "+"\r\n");}
}

TOKEN:{
	<LOOPDO:"do"> {System.out.println("LOOPDO-> "+"\r\n");}
}

TOKEN:{
	<LOOPWHILE:"while "> {System.out.println("LOOPWHILE-> "+"\r\n");}
}

//Tokens para operadores aritmeticos
TOKEN:{
	<ARITM:"+"|"-"|"*"|"/">{System.out.println("ARITM-> "+image+"\r\n");}
}

//Token para asignar
TOKEN:{
	<ASIGN:"="> {System.out.println("ASIGN-> "+"\r\n");}
}

//Token para valores de condición
TOKEN:{
	<CONDITION:"true | false"> {System.out.println("CONDITION-> "+image+"\r\n");}
}

//Tokens de operadores relacionales
TOKEN:{
	<RELAT:"=="|">"|"<"|">="|"<="|"<>" >{System.out.println("RELAT-> "+image+"\r\n");}
	|<LOGIC: " && "|" bitand " |" || " |" bitor "> {System.out.println("LOGIC-> "+image+"\r\n");}
}

//10 nuevos componentes lexicos Marco
//Tokens de tipo de valor
TOKEN:{
   <STRUCTTYPE:"struct " | "yool " >{System.out.println("STRUCTTYPE-> "+ image+"\r\n");}
}
//Tokens para declarar clase
TOKEN:{
	<CLASS:"class " >{System.out.println("CLASS->\r\n");}

}
//tokens  de etiquetas 
TOKEN:{
	<ALT:"ing "|"else"|"finally " >{System.out.println("ALT-> "+"\r\n");}
	|<CASE:"case ">{System.out.println("CASE-> "+image+"\r\n");}

}
//tokens estructura repetitivas
TOKEN:{
    <FOREACH:"foreach "|"ingfer " >{System.out.println("FOREACH-> "+image+"\r\n");}
}
//tokens de clausula
TOKEN:{
    <CATCH:"catch"|"except ">{System.out.println("CATCH-> "+image +"\r\n");}
}

//tokens de sacar raise
TOKEN:{
    <RAISE:"raise">{System.out.println("RAISE-> "+image +"\r\n");}
}


//Token de bloque try catch
TOKEN:{
	<TRYBLOCK:"try">{System.out.println("TRYBLOCK->\r\n");}
}

//Token de imprimir a consola
TOKEN:{
	<PRINTOUT:"print" | "println" | "writeline "> {System.out.println("PRINTOUT-> "+image+"\r\n");}
}

//Token para delclaraciones de seleccion
TOKEN:{
	<IFSTRUCT: "if "> {System.out.println("IFSTRUCT-> "+"\r\n");}
	|<SWITCHSTRUCT:"switch " | "stoom "> {System.out.println("SWITCHSTRUCT-> "+image+"\r\n");}
	|<THEN:"then"> {System.out.println("THEN-> "+"\r\n");}
}
	
//Token para importar paquetes
TOKEN:{
	  <PACKEXP: "packexp "> {System.out.println("PACKEXP-> "+"\r\n");}
	| <IMPORT: "import "> {System.out.println("IMPORT-> "+"\r\n");}
	}
	
//Token para heredar clases
TOKEN:{
	<HCLASS:" >> "> {System.out.println("HCLASS-> "+"\r\n");}
}

//Token para palabra reservada def
TOKEN:{
	<DEF: "def"> {System.out.println("DEF-> "+"\r\n");}
}

//Token para palabra clave de metodos
TOKEN:{
	<CONST:"const "> {System.out.println("CONST-> "+"\r\n");}
}

//Token para Return
TOKEN:{
	<RETURN:"return "> {System.out.println("RETURN-> "+"\r\n");}
}

//Token para bloque enum
TOKEN:{
	<ENUM:"enum"> {System.out.println("ENUM-> "+"\r\n");}
}

//Token para estructuras de datos
TOKEN:{
	<LIST:"list "> {System.out.println("list-> "+"\r\n");}
	|<STACK:"stack "> {System.out.println("stack-> "+"\r\n");}
	|<QUEUE:"queue "> {System.out.println("queue-> "+"\r\n");}
}

//Tokens para arreglos
TOKEN:{
	<ARRAY:"array "> {System.out.println("ARRAY-> "+"\r\n");}
}

//Tokens para comentarios
TOKEN:{
	<COMENT:"// "> {System.out.println("COMENT-> "+"\r\n");}
}

//Tokens para op. en estructuras
TOKEN:{
	<SIZEOF:"sizeof "> {System.out.println("SIZEOF-> "+"\r\n");}
}

//Tokens para op. en estructuras
TOKEN:{
	<GOTO:"goto "> {System.out.println("GOTO-> "+"\r\n");}
}

//Tokens para declaracion de garantia 
TOKEN:{
	<FIXED:"fixed "> {System.out.println("FIXED-> "+"\r\n");}
}

//Tokens para declarar conversion explicita
TOKEN:{
	<EXPLICIT:"explicit "> {System.out.println("EXPLICIT-> "+"\r\n");}
	|<TO:"to "> {System.out.println("TO-> "+"\r\n");}
}

//Tokens para ignorar instruccion
TOKEN:{
	<PASS:"pass "> {System.out.println("PASS-> "+"\r\n");}
}

//Tokens para declarar evento
TOKEN:{
	<EVENT:"event on "> {System.out.println("EVENT-> "+"\r\n");}

}

//Tokens para eliminadores
TOKEN:{
	<DROPET:"dropet "> {System.out.println("DROPET-> "+"\r\n");}

}

//Tokens para crear cadenas
TOKEN:{
	<CADNET:"cadnet "> {System.out.println("CADNET-> "+"\r\n");}

}

//Tokens para eliminar cadenas
TOKEN:{
	<GIW:"giw "> {System.out.println("GIW-> "+"\r\n");}

}

//Tokens para ver la cabeza de la cadena
TOKEN:{
	<HEADK:"headk "> {System.out.println("HEADK-> "+"\r\n");}

}

//Tokens para ver el final de la cadena
TOKEN:{
	<TAILK:"tailk "> {System.out.println("TAILK-> "+"\r\n");}

}

TOKEN:{
	<IDENTIFIER:(["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9","_"])*>{System.out.println("IDENTIFIER ->"+image+"\r\n");}
}
//Token para identificadores de usuario
TOKEN:{
	 <NUMBER:(["0"-"9"])+ > {System.out.print("NUM-> "+image+"\r\n");}
	|<LETTER:["A"-"Z","a"-"z"]> {System.out.print("LETTER-> "+image+"\r\n");}
	|<UNDERSC:"_"> {System.out.print("UNDERSC-> "+image+"\r\n");}
	|<WORD:(<LETTER>)+> {System.out.print("WORD-> "+image+"\r\n");}
	//|<IDENTIFIER: <LETTER> (<WORD> <NUMBER> <UNDERSC>)*>{System.out.println("IDENTIFIER ->"+image+"\r\n");}
	|<STRING : "' " (<LETTER>|<WORD>) (<WORD> <NUMBER>)* " '" >{System.out.print("STRING -> "+image+"\r\n");}
	//|<STRING : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*>{System.out.print("STRING -> "+image+"\r\n");}
	}
//Fin de estados léxicos


SKIP:{" " | "\n" | "\r" | "\r\n" | "\t"}

//Inicio de procedimientos para definir patrones


void Start():
{
	int contador = 0;
	Token t;
	ArrayList<String> Lista = new ArrayList<String>();
}
{

	(

		
	<NUMBER>
	|<STRING>
	|<IDREACH>
	|<CLASSTYPE>
	|<VOID>
	|<NUMTYPES>
	|<FLOATTYPE>
	|<STRINGTYPE>
	|<CHARTYPE>
	|<BOOL>
	|<LPAR>
	|<RPAR>
	|<LBRACE>
	|<RBRACE>
	|<SEMICOLON>
	|<ARITM>
	|<CONDITION>
	|<RELAT>
	|<STRUCTTYPE>
	|<CLASS>
	|<ALT>
	|<FOREACH>
	|<CATCH>
	|<TRYBLOCK>
	|<PRINTOUT>
	|<IFSTRUCT>
	|<SWITCHSTRUCT>
	|
		 t = <IDENTIFIER>
		{String variable = t.image;}
			{
				if(Lista.contains(variable))
				{
					
				}
				else
				{
					Lista.add(variable);
				}
				contador++;
			}

		{System.out.println("Identificador: " + variable + " " + Lista.indexOf(variable) );} 
	)*	
}

void Programa():
{}
{
	<IDENTIFIER> (Librerias())? (Clase())* <EOF>
}

void Librerias():
{}
{
	( (<PACKEXP> | <IMPORT> ) <IDENTIFIER>)+
}

void Clase():
{}
{
	(Heredar())? <CLASS> <IDENTIFIER> (DeclarVarGlob() | Metodo() | Enumerable() | Estructura() | Comentario() | Size() ) * 
}


void Heredar():
{}
{
	<IDENTIFIER> <HCLASS>
}

void DeclarVarGlob():
{}
{
	<DEF> DefinirVariables() <COLON>
}

void DefinirVariables():
{}
{
	(<IDENTIFIER> <ASIGN> (<NUMTYPES>|<FLOATTYPE>|<BOOL>|<STRINGTYPE>|<CHARTYPE>) )+
}

void Metodo():
{}
{
	<CONST><VOID><IDENTIFIER> Bloque()  
}

void Bloque():
{}
{
	(Ciclos() | Pregunta() | ImpCons() | declarVarLocal()  | OpAritmetica() | CicloForEach() 
	| Goto() | Raise() | TryCatch() |Switch() | Conversion() |Ignorar() |  Evento() | fixed() | cadnet() | giw() | headk() | tailk() | dropet())*  Return()
}



void ImpCons():
{}
{
      <PRINTOUT> (Valor() | <IDENTIFIER>)
 }
 


void Return():
{}
{
	<RETURN> <IDENTIFIER>
}

void declarVarLocal():
{}
{
	<DEF> DefinirVariables() <COLON>
}


void Ciclos():
{}
{
	(CicloFor() | CicloWhile() | CicloDo())
}

void CicloFor():
{}
{
	<LOOPFOR> EstructuraFor() Bloque() <COLON>
}

void EstructuraFor():
{}
{
	Condicion() <COMA> <IDENTIFIER> <ASIGN> Valor() <COMA> Incremento() 
}

void Incremento():
{}
{
	<IDENTIFIER> <ARITM> Valor()
}

void CicloWhile():
{}
{
	<LOOPWHILE> Condicion() Bloque() <COLON>
}

void CicloDo():
{}
{
       <LOOPDO> Bloque() <LOOPWHILE> Condicion() <COLON>
}

void CicloForEach():
{}
{
	<FOREACH> Condicion() Bloque() <COLON>
}

void Pregunta():
{}
{
      <IFSTRUCT> Condicion() <THEN> Bloque() <COLON> (Sino())?
}


void Sino():
{}
{
     <ALT> Bloque() <COLON>
}

void TryCatch():
{}
{
	<TRYBLOCK> (Ciclos() | Pregunta() | ImpCons() | declarVarLocal()  | OpAritmetica())* <COLON> <CATCH> Bloque() <COLON>
}

void Switch():
{}
{
	<SWITCHSTRUCT> <IDENTIFIER> (<CASE> Valor() Bloque())+ <COLON>
}


void Condicion():
{}
{
    Oprelacional() (<LOGIC> Oprelacional() )*
}


void Oprelacional():
{}
{
    (<IDENTIFIER> | Valor()) (<ARITM>(<IDENTIFIER>|Valor() ) )* <RELAT> (<IDENTIFIER> | Valor()) (<ARITM>(<IDENTIFIER>|Valor() ) )*
}

void OpAritmetica():
{}
{
    //IDENTIFIER> <ASIGN> (<IDENTIFIER> | Valor()) (<ARITM> (<IDENTIFIER> | Valor()))*  
	(<IDENTIFIER> <ASIGN>)? (<IDENTIFIER> | Valor() ) (<ARITM> (<IDENTIFIER> | Valor() ))*
	//(Factor() |Valor()) (<ARITM> (<IDENTIFIER> | Valor() ))+
}

void Valor():
{}
{
    (<CONDITION> | <NUMBER> | <STRING>)
}

void Enumerable():
{}
{
    <ENUM> <IDENTIFIER> BloqueEnum() <COLON>
}

void BloqueEnum():
{}
{
     (Valor())+
}


void Estructura():
{}
{
    (<STRINGTYPE>|<NUMTYPES>) (EstructuraDatos() | (EstructuraEstatica() <IDENTIFIER>) )
}

void EstructuraDatos():
{}
{
    Lista() | Stack() | Queue()
}

void Lista():
{}
{
	<LIST> <IDENTIFIER> (<NUMBER><COMA>Valor())+ <COLON>
}

void Stack():
{}
{
	<STACK> <IDENTIFIER> (Valor())+ <COLON>
}

void Queue():
{}
{
	<QUEUE> <IDENTIFIER> (Valor())+ <COLON>
}

void EstructuraEstatica():
{}
{
   <ARRAY> | <STRUCTTYPE>
}

void Comentario():
{}
{
	<COMENT> Valor()
}

void Size():
{}
{
	<SIZEOF> <IDENTIFIER>
}

void Goto():
{}
{
	<GOTO> <NUMBER>
}

void Raise():
{}
{
	<RAISE> Bloque() <COLON>
}

void Conversion():
{}
{
	<EXPLICIT> <IDENTIFIER> <TO> (<NUMTYPES> | <STRINGTYPE>| <FLOATTYPE> | <CHARTYPE>)
}

void Ignorar():
{}
{
	<PASS> (Ciclos() | Pregunta() | ImpCons() | declarVarLocal()  | OpAritmetica())
}

void Evento():
{}
{
	<EVENT> Condicion() Bloque() <COLON>
}

void fixed():
{}
{
   <FIXED> <IDENTIFIER> <COLON>
}

void dropet():
{}
{
  <DROPET> <IDENTIFIER> Bloque() <COLON>
}

void cadnet():
{}
{
  <CADNET> <IDENTIFIER> Bloque() <COLON>
}

void giw():
{}
{
  <GIW> <IDENTIFIER> Bloque() <COLON>
}

void headk():
{}
{
  <HEADK> <IDENTIFIER> Bloque() <COLON>
}

void tailk():
{}
{
  <TAILK> <IDENTIFIER> Bloque() <COLON>
}

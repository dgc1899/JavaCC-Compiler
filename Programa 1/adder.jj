/* adder.jj Para tokenizer*/

options{	
			STATIC=false;
		}
// Bloque de instrucciones para definir el Parser		
PARSER_BEGIN(adder)
import java.util.HashMap;

class adder{
			public static void main(String[]args)
			throws ParseException, TokenMgrError{
			adder parser=new adder(System.in);
			parser.Start();										
				}
		}			
PARSER_END(adder)

//Inicio de estados léxicos

SKIP:{" " | "\n" | "\r" | "\r\n" | "\t"}


//Token para identificadores de usuario
TOKEN:{
	<IDENTIFIER:["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_"])*>{System.out.println("IDENTIFIER ->"+image+"\r\n");}
	|<STRING : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*>{System.out.print("STRING -> "+image+"\r\n");}
	| <NUMBER : (["0"-"9"])+ > {System.out.print("NUM-> "+image+"\r\n");}
	}
//Token para Alcance de Identificador
TOKEN:{
<IDREACH:"public "|"private "|"protected " > {System.out.println("IDREACH->"+image+"\r\n");}	
}

//Tokens de tipos de numeros
TOKEN:{
		<NUMTYPES:("int "|"byte "|"short "|"long "|"sbyte "|"ushort "|"ulong ")>{System.out.println("NUMTYPES-> "+image+"\r\n");}
		|<FLOATTYPE:("float "|"double "|"decimal ")>{System.out.println("FLOATTYPE-> "+image+"\r\n");}
	}

//Tokens de tipo de datos alfanumericos
TOKEN:{
	<STRINGTYPE:("string ")>{System.out.println("STRINGTYPE-> "+"\r\n");}
	|<CHARTYPE:("char ")>{System.out.println("CHARTYPE-> "+"\r\n");}
}
	
//Token para tipo de dato booleano
TOKEN:{  
   <BOOL:"bool " >{System.out.println("BOOL->"+"\r\n");}
}


//Tokens de símbolos
TOKEN:
{
	<LPAR:"(">{System.out.println("LPAR->"+"\r\n");}
	| <RPAR:")">{System.out.println("RPAR->"+"\r\n");}
	| <LBRACE:"{">{System.out.println("LBRACE->"+"\r\n");}
	| <RBRACE:"}">{System.out.println("RBRACE->"+"\r\n");}
	| <SEMICOLON:";">{System.out.println("SEMICOL->"+"\r\n");}
}

//Tokens para bloques repetitivos, control de flujo
TOKEN:{
	<LOOP:"for| do| while ">{System.out.println("LOOP-> "+image+"\r\n");}
}

//Tokens para operadores aritmeticos
TOKEN:{
	<ARITM:"= | + | - | * | / ">{System.out.println("ARITM-> "+image+"\r\n");}
}

//Token para valores de condición
TOKEN:{
	<CONDITION:"true |false "> {System.out.println("CONDITION-> "+image+"\r\n");}
}

//Tokens de operadores relacionales
TOKEN:{
	<RELAT:"&& "|"bitand " |"|| " |"bitor "|"== "|"> "|"< "|">= "|"<= "|"<> " >{System.out.println("RELAT-> "+image+"\r\n");}
}

//10 nuevos componentes lexicos Marco
//Tokens de tipo de valor
TOKEN:{
   <STRUCTTYPE:"struct " | "yool " >{System.out.println("STRUCTTYPE-> "+ image+"\r\n");}
}
//Tokens para declarar clase
TOKEN:{
	<CLASS:"class " >{System.out.println("CLASS->\r\n");}

}
//tokens  de etiquetas 
TOKEN:{
	<ALT:"case "| "ing "|"else "|"finally " >{System.out.println("ALT-> "+image+"\r\n");}

}
//tokens estructura repetitivas
TOKEN:{
    <FOREACH:"foreach "|"ingfer " >{System.out.println("FOREACH-> "+image+"\r\n");}
}
//tokens de clausula
TOKEN:{
    <CATCH:"catch "|"except "|"raise " >{System.out.println("CATCH-> "+image +"\r\n");}
}


//Tokens para declarar metodos y clases
TOKEN:{
	<CLASSTYPE:"abstract |static | const | implements | clascy">{System.out.println("CLASSTYPE-> "+image+"\r\n");}
}

//Token de bloque try catch
TOKEN:{
	<TRYBLOCK:"try ">{System.out.println("TRYBLOCK->\r\n");}
}

//Token de imprimir a consola
TOKEN:{
	<PRINTOUT:"print | println | writeline"> {System.out.println("PRINTOUT-> "+image+"\r\n");}
}

//Token para delclaraciones de seleccion
TOKEN:{
	<IFSTRUCT: "if "> {System.out.println("IFSTRUCT-> "+"\r\n");}
	|<SWITCHSTRUCT:"switch | stoom "> {System.out.println("SWITCHSTRUCT-> "+image+"\r\n");}
}
//Fin de estados léxicos

//Inicio de procedimientos para definir patrones


void Start() throws ParseException:
{
	int contador = 0;
	Token t;
	HashMap<String, Integer> Lista = new HashMap<String, Integer>();
}

{
	(
	 <NUMBER>
	| t = <IDENTIFIER>
		{String varible = t.image;}
			{
				if(Lista.get(varible) == null)
				{
					Lista.put(varible, contador);
					contador++;
				}
			}
		{System.out.println("Identificador: " + varible + " " + Integer.toString(Lista.get(varible)));}
	 <IDENTIFIER>
	|<STRING>
	|<IDREACH>
	|<NUMTYPES>
	|<FLOATTYPE>
	|<STRINGTYPE>
	|<CHARTYPE>
	|<BOOL>
	|<LPAR>
	|<RPAR>
	|<LBRACE>
	|<RBRACE>
	|<SEMICOLON>
	|<LOOP>
	|<ARITM>
	|<CONDITION>
	|<RELAT>
	|<STRUCTTYPE>
	|<CLASS>
	|<ALT>
	|<FOREACH>
	|<CATCH>
	|<CLASSTYPE>
	|<TRYBLOCK>
	|<PRINTOUT>
	|<IFSTRUCT>
	|<SWITCHSTRUCT>
	)*	
}

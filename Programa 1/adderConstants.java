/* Generated By:JavaCC: Do not edit this line. adderConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface adderConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IDREACH = 1;
  /** RegularExpression Id. */
  int CLASSTYPE = 2;
  /** RegularExpression Id. */
  int VOID = 3;
  /** RegularExpression Id. */
  int NUMTYPES = 4;
  /** RegularExpression Id. */
  int FLOATTYPE = 5;
  /** RegularExpression Id. */
  int STRINGTYPE = 6;
  /** RegularExpression Id. */
  int CHARTYPE = 7;
  /** RegularExpression Id. */
  int BOOL = 8;
  /** RegularExpression Id. */
  int LPAR = 9;
  /** RegularExpression Id. */
  int RPAR = 10;
  /** RegularExpression Id. */
  int LBRACE = 11;
  /** RegularExpression Id. */
  int RBRACE = 12;
  /** RegularExpression Id. */
  int SEMICOLON = 13;
  /** RegularExpression Id. */
  int COLON = 14;
  /** RegularExpression Id. */
  int COMA = 15;
  /** RegularExpression Id. */
  int DOUBLEC = 16;
  /** RegularExpression Id. */
  int LOOPFOR = 17;
  /** RegularExpression Id. */
  int LOOPDO = 18;
  /** RegularExpression Id. */
  int LOOPWHILE = 19;
  /** RegularExpression Id. */
  int ARITM = 20;
  /** RegularExpression Id. */
  int ASIGN = 21;
  /** RegularExpression Id. */
  int CONDITION = 22;
  /** RegularExpression Id. */
  int RELAT = 23;
  /** RegularExpression Id. */
  int LOGIC = 24;
  /** RegularExpression Id. */
  int STRUCTTYPE = 25;
  /** RegularExpression Id. */
  int CLASS = 26;
  /** RegularExpression Id. */
  int ALT = 27;
  /** RegularExpression Id. */
  int CASE = 28;
  /** RegularExpression Id. */
  int FOREACH = 29;
  /** RegularExpression Id. */
  int CATCH = 30;
  /** RegularExpression Id. */
  int RAISE = 31;
  /** RegularExpression Id. */
  int TRYBLOCK = 32;
  /** RegularExpression Id. */
  int PRINTOUT = 33;
  /** RegularExpression Id. */
  int IFSTRUCT = 34;
  /** RegularExpression Id. */
  int SWITCHSTRUCT = 35;
  /** RegularExpression Id. */
  int THEN = 36;
  /** RegularExpression Id. */
  int PACKEXP = 37;
  /** RegularExpression Id. */
  int IMPORT = 38;
  /** RegularExpression Id. */
  int HCLASS = 39;
  /** RegularExpression Id. */
  int DEF = 40;
  /** RegularExpression Id. */
  int CONST = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int ENUM = 43;
  /** RegularExpression Id. */
  int LIST = 44;
  /** RegularExpression Id. */
  int STACK = 45;
  /** RegularExpression Id. */
  int QUEUE = 46;
  /** RegularExpression Id. */
  int ARRAY = 47;
  /** RegularExpression Id. */
  int COMENT = 48;
  /** RegularExpression Id. */
  int SIZEOF = 49;
  /** RegularExpression Id. */
  int GOTO = 50;
  /** RegularExpression Id. */
  int EXPLICIT = 51;
  /** RegularExpression Id. */
  int TO = 52;
  /** RegularExpression Id. */
  int PASS = 53;
  /** RegularExpression Id. */
  int EVENT = 54;
  /** RegularExpression Id. */
  int IDENTIFIER = 55;
  /** RegularExpression Id. */
  int NUMBER = 56;
  /** RegularExpression Id. */
  int LETTER = 57;
  /** RegularExpression Id. */
  int UNDERSC = 58;
  /** RegularExpression Id. */
  int WORD = 59;
  /** RegularExpression Id. */
  int STRING = 60;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<IDREACH>",
    "\"abstract | static | const | implements | clascy \"",
    "\"void \"",
    "<NUMTYPES>",
    "<FLOATTYPE>",
    "\"string\"",
    "\"char\"",
    "\"bool\"",
    "\"( \"",
    "\") \"",
    "\"{ \"",
    "\"} \"",
    "\"; \"",
    "\":\"",
    "\", \"",
    "\"\\\"\"",
    "\"for \"",
    "\"do \"",
    "\"while \"",
    "<ARITM>",
    "\"=\"",
    "\"true | false\"",
    "<RELAT>",
    "<LOGIC>",
    "<STRUCTTYPE>",
    "\"class \"",
    "<ALT>",
    "\"case \"",
    "<FOREACH>",
    "<CATCH>",
    "\"raise\"",
    "\"try \"",
    "<PRINTOUT>",
    "\"if \"",
    "<SWITCHSTRUCT>",
    "\"then\"",
    "\"packexp \"",
    "\"import \"",
    "\" >> \"",
    "\"def\"",
    "\"const \"",
    "\"return \"",
    "\"enum\"",
    "\"list \"",
    "\"stack \"",
    "\"queue \"",
    "\"array \"",
    "\"?\"",
    "\"sizeof \"",
    "\"goto \"",
    "\"explicit  \"",
    "\"to \"",
    "\"pass \"",
    "\"event on \"",
    "<IDENTIFIER>",
    "<NUMBER>",
    "<LETTER>",
    "\"_\"",
    "<WORD>",
    "<STRING>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\t\"",
  };

}

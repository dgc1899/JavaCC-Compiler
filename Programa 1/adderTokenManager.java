/* adderTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. adderTokenManager.java */
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings ("unused")
public class adderTokenManager implements adderConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 40;
            return 141;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 40;
            return 3;
         }
         if ((active0 & 0x401000000000L) != 0L)
         {
            jjmatchedKind = 40;
            return 76;
         }
         if ((active0 & 0x1000000400000L) != 0L)
         {
            jjmatchedKind = 40;
            return 36;
         }
         if ((active0 & 0x200800000000L) != 0L)
         {
            jjmatchedKind = 40;
            return 59;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 40;
            return 103;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 40;
            return 22;
         }
         if ((active0 & 0x2000040001000L) != 0L)
         {
            jjmatchedKind = 40;
            return 133;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 40;
            return 89;
         }
         if ((active0 & 0x800000000000L) != 0L)
            return 26;
         if ((active0 & 0x2000000L) != 0L)
            return 6;
         if ((active0 & 0x120002000000800L) != 0L)
         {
            jjmatchedKind = 40;
            return 120;
         }
         if ((active0 & 0xc0004404800180L) != 0L)
         {
            jjmatchedKind = 40;
            return 155;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 64;
         }
         if ((active0 & 0x120000000000800L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 128;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 35;
         }
         if ((active0 & 0xde607444803180L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 156;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 41;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 114;
         }
         return -1;
      case 2:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
            return 113;
         }
         if ((active0 & 0x100000000000800L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
            return 127;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
            return 63;
         }
         if ((active0 & 0xff606444803180L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
            return 156;
         }
         return -1;
      case 3:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
            return 126;
         }
         if ((active0 & 0xfe606844803980L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
            return 156;
         }
         return -1;
      case 4:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
            return 125;
         }
         if ((active0 & 0xe6602840800880L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
            return 156;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x4602000000880L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
            return 156;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
            return 157;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
            return -1;
         }
         if ((active0 & 0x200000000080L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 6;
            return 156;
         }
         return -1;
      case 7:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
            return 156;
         }
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 28:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 29:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 30:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 31:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 32:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 33:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 34:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 35:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 36:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 37:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 38:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 39:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 40:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 41:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 42:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 43:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 44:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 45:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 46:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 40:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 41:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 43:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 44:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 59:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 95:
         return jjStopAtPos(0, 41);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000000080L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000040001000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000400000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x401000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200800000000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x120002000000800L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4404000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 125:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 32:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000000000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000801000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000602100L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000c04000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000000000800L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(2, 22);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000040001000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40004000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800800100L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000200800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000080L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000004000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 124:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(3, 21);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 34);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4800000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000040000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10002000000080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x144000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(4, 12);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(4, 13);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(4, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(4, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100002000000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x40200000800000L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4400000000080L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000800000000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(5, 30);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 49);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(5, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(5, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 55);
         return jjMoveStringLiteralDfa6_0(active0, 0x801000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 156);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 124:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 50);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x2004000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 112:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 156);
         break;
      case 124:
         return jjMoveStringLiteralDfa7_0(active0, 0x801000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x801000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      case 124:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000080L);
      case 42:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
      case 124:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 124:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(12, 26);
         break;
      case 47:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000080L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(13, 24);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(14, 37);
         break;
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x80L);
      case 124:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000080L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 119:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000L);
      case 124:
         return jjMoveStringLiteralDfa19_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa24_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa24_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa25_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa25_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa26_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa26_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(26, 35);
         break;
      case 124:
         return jjMoveStringLiteralDfa27_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa28_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa29_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa30_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa31_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa32_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa33_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa34_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa35_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa36_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa37_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa38_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa39_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0);
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 124:
         return jjMoveStringLiteralDfa40_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0);
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa41_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0);
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa42_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0);
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa43_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0);
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0);
      return 43;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa44_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0);
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0);
      return 44;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa45_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0);
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0);
      return 45;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa46_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(44, active0);
}
private int jjMoveStringLiteralDfa46_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0);
      return 46;
   }
   switch(curChar)
   {
      case 121:
         return jjMoveStringLiteralDfa47_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0);
}
private int jjMoveStringLiteralDfa47_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0);
      return 47;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(47, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(46, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 155;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  else if (curChar == 32)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 141:
               case 152:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 128:
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(24); }
                  }
                  else if (curChar == 60)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(5, 26); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 26:
                  if (curChar == 61)
                     { jjCheckNAdd(5); }
                  else if (curChar == 32)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 0:
                  if (curChar == 32 && kind > 9)
                     kind = 9;
                  break;
               case 5:
                  if (curChar == 32 && kind > 27)
                     kind = 27;
                  break;
               case 6:
               case 28:
                  if (curChar == 61)
                     { jjCheckNAdd(5); }
                  break;
               case 7:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 32 && kind > 28)
                     kind = 28;
                  break;
               case 9:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 32 && kind > 29)
                     kind = 29;
                  break;
               case 18:
                  if (curChar == 32 && kind > 33)
                     kind = 33;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(24); }
                  break;
               case 25:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(5, 26); }
                  break;
               case 27:
                  if (curChar == 60)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 29:
                  if (curChar == 62)
                     { jjCheckNAdd(5); }
                  break;
               case 31:
                  if (curChar == 32 && kind > 10)
                     kind = 10;
                  break;
               case 54:
                  if (curChar == 32 && kind > 6)
                     kind = 6;
                  break;
               case 77:
                  if (curChar == 32 && kind > 31)
                     kind = 31;
                  break;
               case 80:
                  if (curChar == 32 && kind > 32)
                     kind = 32;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(153, 154); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 157:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  break;
               case 141:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 145;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 103:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 114;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 108;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 76:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 128:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 156:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  break;
               case 125:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 116)
                     { jjCheckNAdd(13); }
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(3, 5); }
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 101)
                     { jjAddStates(6, 7); }
                  else if (curChar == 99)
                     { jjAddStates(8, 9); }
                  else if (curChar == 115)
                     { jjAddStates(10, 12); }
                  else if (curChar == 102)
                     { jjAddStates(13, 15); }
                  else if (curChar == 98)
                     { jjAddStates(16, 18); }
                  else if (curChar == 105)
                     { jjAddStates(19, 21); }
                  else if (curChar == 112)
                     { jjAddStates(22, 24); }
                  else if (curChar == 117)
                     { jjAddStates(25, 26); }
                  else if (curChar == 100)
                     { jjAddStates(27, 28); }
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 59:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 72;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 120:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 128;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 123;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 89:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 97;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 127:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 114:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 155:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 126:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 133:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 136;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 113:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(148); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 1:
               case 49:
                  if (curChar == 103)
                     { jjCheckNAdd(0); }
                  break;
               case 2:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 11:
                  if (curChar == 124)
                     { jjCheckNAdd(8); }
                  break;
               case 12:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 108)
                     { jjCheckNAdd(13); }
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 101)
                     { jjCheckNAdd(18); }
                  break;
               case 20:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 30:
                  if (curChar == 100)
                     { jjAddStates(27, 28); }
                  break;
               case 32:
                  if (curChar == 101)
                     { jjCheckNAdd(31); }
                  break;
               case 33:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 37:
                  if (curChar == 108)
                     { jjCheckNAdd(31); }
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 117)
                     { jjAddStates(25, 26); }
                  break;
               case 44:
               case 75:
               case 117:
                  if (curChar == 116)
                     { jjCheckNAdd(0); }
                  break;
               case 45:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 112)
                     { jjAddStates(22, 24); }
                  break;
               case 55:
                  if (curChar == 99)
                     { jjCheckNAdd(54); }
                  break;
               case 56:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 101)
                     { jjCheckNAdd(54); }
                  break;
               case 61:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 65:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 100)
                     { jjCheckNAdd(54); }
                  break;
               case 67:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 105)
                     { jjAddStates(19, 21); }
                  break;
               case 78:
                  if (curChar == 103)
                     { jjCheckNAdd(77); }
                  break;
               case 79:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if (curChar == 114)
                     { jjCheckNAdd(80); }
                  break;
               case 82:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 98)
                     { jjAddStates(16, 18); }
                  break;
               case 87:
               case 121:
                  if (curChar == 101)
                     { jjCheckNAdd(0); }
                  break;
               case 88:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 90:
                  if (curChar == 100)
                     { jjCheckNAdd(8); }
                  break;
               case 91:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 114)
                     { jjCheckNAdd(8); }
                  break;
               case 96:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 102)
                     { jjAddStates(13, 15); }
                  break;
               case 100:
                  if (curChar == 116)
                     { jjCheckNAdd(31); }
                  break;
               case 101:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 104:
                  if (curChar == 121)
                     { jjCheckNAdd(77); }
                  break;
               case 105:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 104)
                     { jjCheckNAdd(80); }
                  break;
               case 111:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 115:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 115)
                     { jjAddStates(10, 12); }
                  break;
               case 118:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 122:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 129:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 99)
                     { jjAddStates(8, 9); }
                  break;
               case 131:
               case 139:
                  if (curChar == 101)
                     { jjCheckNAdd(77); }
                  break;
               case 132:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 134:
                  if (curChar == 104)
                     { jjCheckNAdd(18); }
                  break;
               case 135:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 101)
                     { jjAddStates(6, 7); }
                  break;
               case 140:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 142:
                  if (curChar == 116)
                     { jjCheckNAdd(18); }
                  break;
               case 143:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 148:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(148); }
                  break;
               case 149:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  break;
               case 151:
                  if (curChar != 95)
                     break;
                  kind = 43;
                  { jjCheckNAdd(149); }
                  break;
               case 153:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjAddStates(29, 30); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 155 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164\40\174\40\163\164\141\164\151\143\40\174\40\143\157\156\163\164\40\174\40\151\155\160\154\145\155\145\156\164\163\40\174\40\143\154\141\163\143\171\40", "\166\157\151\144\40", null, null, "\163\164\162\151\156\147\40", 
"\143\150\141\162\40", "\142\157\157\154\40", "\50\40", "\51\40", "\173\40", "\175\40", "\73\40", 
"\72\40", "\54\40", "\146\157\162\40", "\144\157\40", "\167\150\151\154\145\40", 
"\53\40\174\40\55\40\174\40\52\40\174\40\57\40", "\75\40", "\164\162\165\145\40\174\40\146\141\154\163\145\40", null, null, 
null, "\143\154\141\163\163\40", null, null, null, "\164\162\171\40", 
"\160\162\151\156\164\40\174\40\160\162\151\156\164\154\156\40\174\40\167\162\151\164\145\154\151\156\145", "\151\146\40", "\163\167\151\164\143\150\40\174\40\163\164\157\157\155\40", 
"\164\150\145\156\40", null, null, "\137", null, null, null, "\160\141\143\153\145\170\160", 
"\151\155\160\157\162\164", "\76\76\40", "\144\145\146\40", "\143\157\156\163\164\40", 
"\162\145\164\165\162\156\40", "\145\156\165\155\40", "\154\151\163\164\40", "\163\164\141\143\153\40", 
"\161\165\145\165\145\40", "\141\162\162\141\171\40", "\163\164\162\165\143\164\40", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   5, 28, 29, 148, 149, 152, 141, 146, 133, 137, 120, 124, 129, 103, 109, 115, 
   89, 94, 98, 76, 79, 85, 59, 65, 73, 48, 52, 36, 42, 153, 154, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              System.out.println("IDREACH->"+image+"\r\n");
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                                                                       System.out.println("CLASSTYPE-> "+image+"\r\n");
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                       System.out.println("VOID-> "+"\r\n");
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                         System.out.println("NUMTYPES-> "+image+"\r\n");
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                             System.out.println("FLOATTYPE-> "+image+"\r\n");
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                                 System.out.println("STRINGTYPE-> "+"\r\n");
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                              System.out.println("CHARTYPE-> "+"\r\n");
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                   System.out.println("BOOL->"+"\r\n");
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                    System.out.println("LPAR->"+"\r\n");
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                      System.out.println("RPAR->"+"\r\n");
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                        System.out.println("LBRACE->"+"\r\n");
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                        System.out.println("RBRACE->"+"\r\n");
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                           System.out.println("SEMICOL->"+"\r\n");
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                       System.out.println("COL->"+"\r\n");
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                       System.out.println("COMA->"+"\r\n");
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                         System.out.println("LOOPFOR-> "+"\r\n");
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                        System.out.println("LOOPDO-> "+"\r\n");
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                              System.out.println("LOOPWHILE-> "+"\r\n");
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                                 System.out.println("ARITM-> "+image+"\r\n");
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                      System.out.println("ASIGN-> "+"\r\n");
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                                     System.out.println("CONDITION-> "+image+"\r\n");
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   System.out.println("RELAT-> "+image+"\r\n");
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                    System.out.println("LOGIC-> "+image+"\r\n");
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("STRUCTTYPE-> "+ image+"\r\n");
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                          System.out.println("CLASS->\r\n");
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  System.out.println("ALT-> "+image+"\r\n");
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    System.out.println("FOREACH-> "+image+"\r\n");
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         System.out.println("CATCH-> "+image +"\r\n");
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                          System.out.println("TRYBLOCK->\r\n");
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                                                  System.out.println("PRINTOUT-> "+image+"\r\n");
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                           System.out.println("IFSTRUCT-> "+"\r\n");
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                                           System.out.println("SWITCHSTRUCT-> "+image+"\r\n");
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                         System.out.println("THEN-> "+"\r\n");
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   System.out.print("NUM-> "+image+"\r\n");
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.print("LETTER-> "+image+"\r\n");
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                        System.out.print("UNDERSC-> "+image+"\r\n");
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.print("WORD-> "+image+"\r\n");
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                             System.out.println("IDENTIFIER ->"+image+"\r\n");
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                         System.out.print("STRING -> "+image+"\r\n");
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                                System.out.println("PACKEXP-> "+"\r\n");
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                              System.out.println("IMPORT-> "+"\r\n");
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                        System.out.println("HCLASS-> "+"\r\n");
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                       System.out.println("DEF-> "+"\r\n");
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                          System.out.println("CONST-> "+"\r\n");
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                            System.out.println("RETURN-> "+"\r\n");
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                        System.out.println("ENUM-> "+"\r\n");
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                        System.out.println("list-> "+"\r\n");
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                           System.out.println("stack-> "+"\r\n");
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                           System.out.println("queue-> "+"\r\n");
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                          System.out.println("ARRAY-> "+"\r\n");
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                             System.out.println("STRUCT-> "+"\r\n");
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public adderTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public adderTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 155; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[155];
    private final int[] jjstateSet = new int[2 * 155];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
